---
import BaseLayout from "./BaseLayout.astro";
import { getCollection } from "astro:content";
import TimeAgo from "../components/TimeAgo";

const { collections, title } = Astro.props;

// fetch posts from each collection
const allPosts = (await Promise.all(collections.map((name) => getCollection(name)))).flat();
const posts = allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
---

<BaseLayout>
  <div class="grid grid__2">
    <section class="listing">
      <h1>{title}</h1>
      <div class="grid grid__3">
        {
          posts.map((post) => {
            let descHtml = post.data.description || "";
            descHtml = descHtml.replace(/<a\s/gi, '<a class="inherit-color" ');

            return (
              <article class={`pos-r collection__${post.collection}`} key={post.id}>
                {post.data.heroImage && <img src={post.data.heroImage} class="image" alt="" style={post.data.heroImageWeighted ? `object-position: ${post.data.heroImageWeighted};` : undefined} />}
                <div class="content">
                  <div>
                    <a class="large-target title" href={post.collection === "bookmarks" ? post.data.url : `/${post.collection}/${post.id}/`} rel={post.collection === "bookmarks" ? "noopener noreferrer" : undefined}>
                      {post.data.title}
                      {post.collection === "bookmarks" && (
                        <>
                          <span class="external" aria-hidden="true">
                            ‚Üó
                          </span>
                          <span class="visually-hidden">(external)</span>
                        </>
                      )}
                    </a>

                    {post.data.url && (
                      <div aria-hidden="true">
                        <img
                          src={`https://favicone.com/${
                            post.data.url
                              .replace(/^https?:\/\//, "")
                              .replace(/^www\./, "")
                              .split("/")[0]
                          }?s=40`}
                          class="favicon"
                          alt=""
                        />
                        <span class="url">
                          {post.data.url
                            .replace(/^https?:\/\//, "")
                            .replace(/^www\./, "")
                            .replace(/\/$/, "")}
                        </span>
                      </div>
                    )}

                    {descHtml && <div class="description" set:html={descHtml} />}
                  </div>

                  <footer>
                    {post.data.tags?.length > 0 && (
                      <p class="badge-grid">
                        <span class="emoji" aria-label="Tags">
                          üè∑Ô∏è
                        </span>
                        <span class="badge-wrap">
                          {post.data.tags.map((tag) => (
                            <span class="badge" key={tag}>
                              {tag}
                            </span>
                          ))}
                        </span>
                      </p>
                    )}
                    <p class="badge-grid mb-0">
                      <span class="emoji" aria-hidden="true">
                        {post.collection === "bookmarks" ?
                          "üîó"
                        : post.collection === "blog" ?
                          "üìù"
                        : post.collection === "experiments" ?
                          "üß™"
                        : ""}
                      </span>
                      <span class="badge-wrap">
                        <span class="badge">
                          {post.collection === "bookmarks" ?
                            "Bookmarked "
                          : post.collection === "blog" ?
                            "Published "
                          : post.collection === "experiments" ?
                            "Created "
                          : ""}
                          <TimeAgo dateTime={post.data.date} />
                        </span>
                      </span>
                    </p>
                  </footer>
                </div>
              </article>
            );
          })
        }
      </div>
      <slot name="footer" />
    </section>
  </div>

  <style>
    article {
      background: var(--bodybg);
      border-radius: 1rem;
      border: 2px solid transparent;
      transition: 0.3s ease all;
      display: flex;
      flex-direction: row;
      will-change: transform;
      overflow: hidden;
    }

    article:hover,
    article:focus-within {
      border-color: var(--linkhover);
    }

    @media (min-width: 48rem) {
      article:hover,
      article:focus-within {
        transform: scale(1.025);
      }
    }

    article:hover .external,
    article:focus-within .external {
      opacity: 1;
    }
    article:hover .url,
    article:focus-within .url {
      color: var(--linkhover);
      text-decoration-style: wavy;
    }

    .collection__bookmarks {
      background: var(--bg);
      border-color: var(--bodybg);
    }

    .collection__bookmarks .badge {
      background: var(--bodybg);
    }

    .collection__experiments {
      border-color: var(--bodybg);
      background-color: var(--bg);
      background-image: linear-gradient(var(--bodybg) 1px, transparent 1px), linear-gradient(to right, var(--bodybg) 1px, var(--bg) 1px);
      background-size: 2rem 2rem;
      background-position: center top -2px;
      position: relative;
      border-radius: 0;
    }

    .collection__experiments::before {
      content: "";
      position: absolute;
      inset: 0;
      --thickness: 3px; /* thickness of the border */
      --color: var(--bodybg); /* color of the border */
      --width: 1.5rem; /* width of border */
      background: var(--color);
      --_g: #0000 90deg, #000 0;
      --_p: var(--width) var(--width) no-repeat;
      --mask: conic-gradient(from 90deg at top var(--thickness) left var(--thickness), var(--_g)) 0 0 / var(--_p), conic-gradient(from 180deg at top var(--thickness) right var(--thickness), var(--_g)) 100% 0 / var(--_p), conic-gradient(from 0deg at bottom var(--thickness) left var(--thickness), var(--_g)) 0 100% / var(--_p), conic-gradient(from -90deg at bottom var(--thickness) right var(--thickness), var(--_g)) 100% 100% / var(--_p);
      -webkit-mask: var(--mask);
      mask: var(--mask);
      transition: 0.3s ease all;
    }

    .collection__experiments:hover,
    .collection__experiments:focus-within {
      border-color: var(--bodybg);
    }

    .collection__experiments:hover::before,
    .collection__experiments:focus-within::before {
      --color: var(--linkhover); /* color of the border */
    }

    .collection__experiments .content {
      padding: 1.5rem 1rem;
    }

    .collection__experiments .title {
      font-size: 1.8rem;
      line-height: 1.1;
      color: var(--bg);
      text-shadow:
        0.5px 0.5px 0 var(--title),
        -0.5px 0.5px 0 var(--title),
        -0.5px -0.5px 0 var(--title),
        0.5px -0.5px 0 var(--title);
    }

    .collection__experiments .badge {
      border: 1px solid var(--bodybg);
      background: var(--bg);
    }

    .content {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      padding: 0.75rem 1rem;
      height: 100%;
      width: 100%;
      flex: 1 1 auto;
    }

    @media (min-width: 48rem) {
      .listing {
        grid-area: sidebar / sidebar / main / main;
      }
    }

    .image {
      order: 2;
      width: 25%;
      height: 100%;
      object-fit: cover;
      object-position: center;
    }

    .external {
      color: var(--linkhover);
      position: absolute;
      top: 0.5rem;
      right: 1rem;
      transition: 0.3s ease all;
      opacity: 0;
    }

    .description {
      font-size: 0.8rem;
      margin-top: 0.5rem;
    }

    .badge {
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      background-color: var(--bg);
      -webkit-box-decoration-break: clone;
      box-decoration-break: clone;
    }

    .title {
      display: block;
      font-size: 1.2rem;
      line-height: 1.2;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: var(--title);
      text-decoration: none;
      padding-right: 1rem;
    }

    .url {
      text-decoration: underline;
      word-break: break-word;
      font-size: 0.8rem;
      margin: 0;
      display: inline;
    }

    .favicon {
      width: 1rem;
      height: 1rem;
      display: inline;
      margin-right: 0.25rem;
      transform: translateY(0.2rem);
      border-radius: 0.25rem;
      background-color: lavenderblush;
      overflow: hidden;
      padding: 1px;
    }

    article footer,
    .badge-grid {
      font-size: 0.8rem;
      margin-bottom: 0;
    }

    .badge-grid {
      align-items: center;
      gap: 0.5rem;
      display: grid;
      grid-template-columns: 1rem auto;
      align-items: flex-start;
    }

    .badge-grid .emoji {
      transform: translateY(0.5ch);
    }

    .badge-wrap {
      display: flex;
      flex-wrap: wrap;
      gap: 0.25rem;
    }

    article footer {
      display: flex;
      padding-top: 1rem;
      flex-direction: column;
      justify-content: flex-start;
      row-gap: 0.5rem;
    }
  </style>
</BaseLayout>
