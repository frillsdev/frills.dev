---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const posts = (await getCollection("bookmarks")).sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
---

<BaseLayout>
  <section>
    <h1>Bookmarks</h1>

    <label for="bookmark-search">Search bookmarks</label>
    <input id="bookmark-search" type="text" placeholder="Search bookmarks..." autocomplete="on" />

    <div id="bookmark-tags" class="bookmark-tags">
      <!-- Tag buttons injected here -->
    </div>

    <ol reversed class="bookmarks">
      {
        posts.map((post) => {
          let descHtml = post.data.description || "";
          descHtml = descHtml.replace(/<a\s/gi, '<a class="hidden" ');

          return (
            <li class="bookmark h-cite u-like-of">
              <div class="content" data-tags={JSON.stringify(post.data.tags || [])}>
                <a rel="p-name u-url" href={post.data.url} class="title">
                  {post.data.title}
                </a>
                <p class="url">
                  <img src={`https://www.google.com/s2/favicons?domain=${encodeURIComponent(post.data.url)}`} class="favicon" alt=""/>{post.data.url}
                </p>
                <p class="description" set:html={descHtml} />
              </div>
            </li>
          );
        })
      }
    </ol>
  </section>

  <script is:inline>
    const input = document.getElementById("bookmark-search");
    const tagContainer = document.getElementById("bookmark-tags");
    const bookmarkEls = Array.from(document.querySelectorAll(".bookmarks .bookmark"));

    const bookmarks = bookmarkEls.map((bookmark) => {
      const content = bookmark.querySelector(".content");
      let tags = [];

      try {
        tags = JSON.parse(content.dataset.tags || "[]");
      } catch {
        tags = [];
      }

      return {
        element: bookmark,
        text: bookmark.textContent.toLowerCase(),
        tags,
      };
    });

    function filterBookmarks(query) {
      const q = query.toLowerCase();

      bookmarks.forEach(({ element, text, tags }) => {
        const tagMatch = tags.some((tag) => tag.toLowerCase().includes(q));
        const textMatch = text.includes(q);

        element.classList.toggle("hidden", !(textMatch || tagMatch));
      });
    }

    input.addEventListener("input", () => filterBookmarks(input.value));

    const tagSet = new Set(bookmarks.flatMap((b) => b.tags));
    [...tagSet].sort().forEach((tag) => {
      const btn = document.createElement("button");
      btn.textContent = `#${tag}`;
      btn.className = "tag-filter";
      btn.addEventListener("click", () => {
        input.value = tag;
        filterBookmarks(tag);
      });
      tagContainer.appendChild(btn);
    });
  </script>

  <style>
    .hidden {
      display: none;
    }

    .bookmarks {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
      padding-top: 1rem;
      padding-inline-start: 0;
    }

    @media (min-width: 576px) {
      .bookmarks {
        grid-template-columns: 1fr 1fr;
      }
    }

    @media (min-width: 1200px) {
      .bookmarks {
        grid-template-columns: 1fr 1fr 1fr;
      }
    }

    @media (min-width: 1600px) {
      .bookmarks {
        grid-template-columns: 1fr 1fr 1fr 1fr;
      }
    }

    .bookmark-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    .tag-filter {
      padding: 0.25rem 0.75rem;
      font-size: 0.875rem;
      border-radius: 0.5rem;
      background: var(--bg);
      color: var(--subtext);
      border: none;
      cursor: pointer;
    }

    .tag-filter:hover,
    .tag-filter:focus {
      background: var(--linkhover);
      color: var(--bg);
    }

    .bookmark {
      border-radius: 0.75rem;
      overflow: hidden;
      background-color: var(--bodybg);
      transition: 0.3s ease transform;
    }

    .bookmark:hover,
    .bookmark:focus-within {
      transform: scale(1.025);
    }

    .content {
      padding: 1rem 1.5rem;
      background-color: var(--bodybg);
      border-radius: 0.75rem;
    }

    .title {
      display: block;
      font-size: 1.2rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: var(--text);
      text-decoration: none;
      position: relative;
    }

    .title:hover,
    .title:focus,
    .title:visited {
      color: var(--text);
      text-decoration: none;
    }

    .url {
      display: block;
      margin-bottom: 1rem;
      text-decoration: underline;
      text-underline-offset: 2px;
      color: var(--link);
      word-break: break-word;
    }

    .favicon {
      width: 1rem;
      height: 1rem;
      display: inline;
      margin-right: 0.5rem;
      transform: translateY(0.2rem);
      border-radius: 50%;
      border: 2px solid var(--bg);
    }

    .description {
      font-size: 80%;
      margin-bottom: 0;
    }

    .description__link {
      color: var(--text);
      text-decoration: underline;
    }
  </style>
</BaseLayout>
